{"filter":false,"title":"ProviderRepository.php","tooltip":"/cms/vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php","ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":209,"column":1},"end":{"row":209,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":90,"state":"php-start","mode":"ace/mode/php"}},"hash":"aaaeeb1e1a15bf4a34ff4ad142209a8f74a7eeb2","mime":"application/octet-stream","changed":true,"value":"<?php\n\nnamespace Illuminate\\Foundation;\n\nuse Exception;\nuse Illuminate\\Contracts\\Foundation\\Application as ApplicationContract;\nuse Illuminate\\Filesystem\\Filesystem;\n\nclass ProviderRepository\n{\n    /**\n     * The application implementation.\n     *\n     * @var \\Illuminate\\Contracts\\Foundation\\Application\n     */\n    protected $app;\n\n    /**\n     * The filesystem instance.\n     *\n     * @var \\Illuminate\\Filesystem\\Filesystem\n     */\n    protected $files;\n\n    /**\n     * The path to the manifest file.\n     *\n     * @var string\n     */\n    protected $manifestPath;\n\n    /**\n     * Create a new service repository instance.\n     *\n     * @param  \\Illuminate\\Contracts\\Foundation\\Application  $app\n     * @param  \\Illuminate\\Filesystem\\Filesystem  $files\n     * @param  string  $manifestPath\n     * @return void\n     */\n    public function __construct(ApplicationContract $app, Filesystem $files, $manifestPath)\n    {\n        $this->app = $app;\n        $this->files = $files;\n        $this->manifestPath = $manifestPath;\n    }\n\n    /**\n     * Register the application service providers.\n     *\n     * @param  array  $providers\n     * @return void\n     */\n    public function load(array $providers)\n    {\n        $manifest = $this->loadManifest();\n\n        // First we will load the service manifest, which contains information on all\n        // service providers registered with the application and which services it\n        // provides. This is used to know which services are \"deferred\" loaders.\n        if ($this->shouldRecompile($manifest, $providers)) {\n            $manifest = $this->compileManifest($providers);\n        }\n\n        // Next, we will register events to load the providers for each of the events\n        // that it has requested. This allows the service provider to defer itself\n        // while still getting automatically loaded when a certain event occurs.\n        foreach ($manifest['when'] as $provider => $events) {\n            $this->registerLoadEvents($provider, $events);\n        }\n\n        // We will go ahead and register all of the eagerly loaded providers with the\n        // application so their services can be registered with the application as\n        // a provided service. Then we will set the deferred service list on it.\n        foreach ($manifest['eager'] as $provider) {\n            $this->app->register($provider);\n        }\n\n        $this->app->addDeferredServices($manifest['deferred']);\n    }\n\n    /**\n     * Load the service provider manifest JSON file.\n     *\n     * @return array|null\n     */\n    public function loadManifest()\n    {\n        // The service manifest is a file containing a JSON representation of every\n        // service provided by the application and whether its provider is using\n        // deferred loading or should be eagerly loaded on each request to us.\n        if ($this->files->exists($this->manifestPath)) {\n            $manifest = $this->files->getRequire($this->manifestPath);\n\n            if ($manifest) {\n                return array_merge(['when' => []], $manifest);\n            }\n        }\n    }\n\n    /**\n     * Determine if the manifest should be compiled.\n     *\n     * @param  array  $manifest\n     * @param  array  $providers\n     * @return bool\n     */\n    public function shouldRecompile($manifest, $providers)\n    {\n        return is_null($manifest) || $manifest['providers'] != $providers;\n    }\n\n    /**\n     * Register the load events for the given provider.\n     *\n     * @param  string  $provider\n     * @param  array  $events\n     * @return void\n     */\n    protected function registerLoadEvents($provider, array $events)\n    {\n        if (count($events) < 1) {\n            return;\n        }\n\n        $this->app->make('events')->listen($events, function () use ($provider) {\n            $this->app->register($provider);\n        });\n    }\n\n    /**\n     * Compile the application service manifest file.\n     *\n     * @param  array  $providers\n     * @return array\n     */\n    protected function compileManifest($providers)\n    {\n        // The service manifest should contain a list of all of the providers for\n        // the application so we can compare it on each request to the service\n        // and determine if the manifest should be recompiled or is current.\n        $manifest = $this->freshManifest($providers);\n\n        foreach ($providers as $provider) {\n            $instance = $this->createProvider($provider);\n\n            // When recompiling the service manifest, we will spin through each of the\n            // providers and check if it's a deferred provider or not. If so we'll\n            // add it's provided services to the manifest and note the provider.\n            if ($instance->isDeferred()) {\n                foreach ($instance->provides() as $service) {\n                    $manifest['deferred'][$service] = $provider;\n                }\n\n                $manifest['when'][$provider] = $instance->when();\n            }\n\n            // If the service providers are not deferred, we will simply add it to an\n            // array of eagerly loaded providers that will get registered on every\n            // request to this application instead of \"lazy\" loading every time.\n            else {\n                $manifest['eager'][] = $provider;\n            }\n        }\n\n        return $this->writeManifest($manifest);\n    }\n\n    /**\n     * Create a fresh service manifest data structure.\n     *\n     * @param  array  $providers\n     * @return array\n     */\n    protected function freshManifest(array $providers)\n    {\n        return ['providers' => $providers, 'eager' => [], 'deferred' => []];\n    }\n\n    /**\n     * Write the service manifest file to disk.\n     *\n     * @param  array  $manifest\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    public function writeManifest($manifest)\n    {\n        if (! is_writable($dirname = dirname($this->manifestPath))) {\n            throw new Exception(\"The {$dirname} directory must be present and writable.\");\n        }\n\n        $this->files->replace(\n            $this->manifestPath, '<?php return '.var_export($manifest, true).';'\n        );\n\n        return array_merge(['when' => []], $manifest);\n    }\n\n    /**\n     * Create a new provider instance.\n     *\n     * @param  string  $provider\n     * @return \\Illuminate\\Support\\ServiceProvider\n     */\n    public function createProvider($provider)\n    {\n        return new $provider($this->app);\n    }\n}\n","undoManager":{"mark":0,"position":-1,"stack":[[{"start":{"row":207,"column":8},"end":{"row":207,"column":9},"action":"insert","lines":["/"],"id":20},{"start":{"row":207,"column":9},"end":{"row":207,"column":10},"action":"insert","lines":["/"]}]]},"timestamp":1631430081662}